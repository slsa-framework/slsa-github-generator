# Copyright The GOSST team.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: SLSA Docker-based builder

permissions:
  contents: read

# TODO: env vars for builder

defaults:
  run:
    shell: bash

###################################################################
#                                                                 #
#            Input and output argument definitions                #
#                                                                 #
###################################################################
on:
  workflow_call:
    inputs:
      builder-image:
        description: >
          The OCI image name of the builder image responsible for
          creating the artifact. This must not include a tag or digest.
        required: true
        type: string
      builder-digest:
        description: >
          The OCI image digest of the builder-image.
          This must be specified in order to fully specify the builder
          image. The image digest is of the form '<alg>:<digest>'
        required: true
        type: string
      config-path:
        description: >
          Path to a configuration file relative to the root of the repository
          containing a command that the builder image should be invoked with and
          optionally, docker options and environment variables.
        required: true
        type: string
      builder-output-path:
        description: >
          Path to the builder's output artifact(s) relative to the root of the Git
          repository.
          Users may specify a single artifact or use a shell-style wildcard
          pattern to match multiple artifacts.
          Defaults to the sub-folder output/.
        required: false
        type: string
        default: 'output/**'
      source-repository:
        description: >
          Source repository to checkout for the build. For example, octocat/hello-world.
          The builder will mount the root of this source repository to the workspace.

          By default, uses the source repository of the caller workflow.
        required: false
        type: string
      source-digest:
        description: >
          The SHA of the source repository to checkout. The digest is of the form
          '<alg>:<digest>'.

          By default, uses the source repository of the caller workflow.
        required: false
        type: string
      private-repository:
        description: "If true, private repositories can post to the public transparency log."
        required: false
        type: boolean
        default: false
        # TODO: Options for requesting and verifying provenance of builder image
        # This will use slsa-verifier and slsa-verifier option.
        #      * request-builder-verification

        # TODO: Secrets and Authentication options for the builder-image.
        #      * registry-username
        #      * registry-password

jobs:
  rng:
    outputs:
      value: ${{ steps.rng.outputs.random }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate random 16-byte value (32-char hex encoded)
        id: rng
        uses: slsa-framework/slsa-github-generator/.github/actions/rng@main

  # This detects the repository and ref of the reusable workflow.
  # For pull request, this gets the head repository and head SHA.
  detect-env:
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the builder ref
        id: detect
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow@main

  ###################################################################
  #                                                                 #
  #           Optional: Verify builder-image provenance             #
  #                                                                 #
  ###################################################################
  verify-builder-image:
    # This is a no-op right now.
    outputs:
      verified: ${{ steps.verify.outputs.verified }}
    runs-on: ubuntu-latest
    steps:
      - name: run no-op slsa-verifier
        id: verify
        env:
          BUILDER_IMAGE: ${{ inputs.builder-image }}
          BUILDER_DIGEST: ${{ inputs.builder-digest }}
          SOURCE_URI: octocat/hello-world
        run: |
          echo "verified=false" >> $GITHUB_OUTPUT

  ###################################################################
  #                                                                 #
  #                   Generate builder binary                       #
  #                                                                 #
  ###################################################################
  generate-builder:
    # TODO: would it be convenient to output the builderDependency?
    # TODO: this is a no-op right now. Replace with final builder.
    outputs:
      builder-binary-sha256: ${{ steps.generate-builder.outputs.sha256 }}
    needs: detect-env
    runs-on: ubuntu-latest
    steps:
      - name: Generate the builder binary
        id: generate-builder
        run: |
          echo "fetches the builder binary and uploads it"
          echo "sha256=5b36fa157544ece32dba62c14480d85322b86918032ca5f40b87f5d1dc386d39" >> $GITHUB_OUTPUT

  ###################################################################
  #                                                                 #
  #     Invoke the builder binary to create a buildDefinition       #
  #                                                                 #
  ###################################################################
  generate-build-definition:
    # TODO: Use the builder binary.
    outputs:
      build-definition-name: ${{ steps.generate.outputs.build-definition-name }}
      build-definition-sha256: ${{ steps.upload.outputs.sha256 }}
    runs-on: ubuntu-latest
    needs: [detect-env, verify-builder-image]
    steps:
      - name: Generate build definition
        id: generate
        # These are the inputs, it may be with: for an action or
        # specified with these env vars.
        env:
          BUILDER_IMAGE: ${{ inputs.builder-image }}
          BUILDER_DIGEST: ${{ inputs.builder-digest }}
          BUILDER_VERIFIED: ${{ needs.verify-builder-image.outputs.verified }}
          CONFIG_PATH: ${{ inputs.config-path }}
          OUTPUT: ${{ inputs.builder-output-path }}
          # Either the provided source repository or the caller's GITHUB_REPOSITORY
          SOURCE_REPOSITORY: ${{ inputs.source-repository || github.repository }}
          # Either the provided digest, or the caller's GITHUB_REF
          SOURCE_DIGEST: ${{ inputs.source-digest || github.ref }}
        run: |
          # Run builder binary and produce buildDefinition
          # TODO: Insert verified builder image provenance into resolvedDep
          echo "run resolution and output buildDefinition!"

          SOURCE_ALG=${SOURCE_DIGEST%%:*}
          SOURCE_DIGEST=${SOURCE_DIGEST#*:}

          IMAGE_ALG=${BUILDER_DIGEST%%:*}
          IMAGE_DIGEST=${BUILDER_DIGEST#*:}

          cat <<EOF >DATA
          {
            "buildType": "https://slsa.dev/container-based-build/v0.1?draft",
            "externalParameters": {
                "artifacts": {
                  "source": {
                    "uri": "git+https://github.com/${SOURCE_REPOSITORY}@${SOURCE_DIGEST}",
                    "digest": { "$SOURCE_ALG": "$SOURCE_DIGEST" }
                  },
                  "builderImage": {
                    "uri": "${BUILDER_IMAGE}",
                    "digest": { "$IMAGE_ALG": "$IMAGE_DIGEST" }
                  }
                },
                "values": {
                  "configFile": "${CONFIG_PATH}"
                }
            },
          }
          EOF

          cat DATA > build-definition.json
          echo "build-definition-name=build-definition.json" >> $GITHUB_OUTPUT

      - name: Checkout builder repository
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          path: __BUILDER_CHECKOUT_DIR__

      - name: Upload the build definition file
        id: upload
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-upload-artifact
        with:
          name: "${{ steps.generate.outputs.build-definition-name }}"
          path: "${{ steps.generate.outputs.build-definition-name }}"

  ###################################################################
  #                                                                 #
  #            Build the project and output subjects                #
  #                                                                 #
  ###################################################################
  build:
    # TODO: This may require authentication for the container image.
    runs-on: ubuntu-latest
    outputs:
      # The filename of the SLSA subject outputs file for secure download.
      slsa-outputs-name: ${{ steps.build.outputs.slsa-outputs-name }}
      # The digest of the SLSA subject outputs file for secure download.
      slsa-outputs-sha256: ${{ steps.upload.outputs.sha256 }}
    needs: [detect-env, generate-builder]
    # TODO: Replace with builder binary
    steps:
      - name: Run builder binary
        id: build
        run: |
          echo "run builder and output subjects!"

          cat <<EOF >DATA
          {
            "version": 1,
             "attestations": [
              {
                "name": "attestation1.intoto",
                "subjects": [
                  { "name": "artifact11",
                    "digest": { "sha256": "ad91970864102a59765e20ce16216efc9d6ad381471f7accceceab7d905703ef" }},
                  { "name": "artifact12",
                    "digest": { "sha256": "d4d5899a3868fbb6ae1856c3e55a32ce35913de3956d1973caccd37bd0174fa2" }}
                ]
              }
            ]
          }
          EOF

          cat DATA > slsa-outputs.json
          echo "slsa-outputs-name=slsa-outputs.json" >> $GITHUB_OUTPUT

      - name: Checkout builder repository
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          path: __BUILDER_CHECKOUT_DIR__

      - name: Upload the SLSA outputs file
        id: upload
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-upload-artifact
        with:
          name: "${{ steps.build.outputs.slsa-outputs-name }}"
          path: "${{ steps.build.outputs.slsa-outputs-name }}"

  ###################################################################
  #                                                                 #
  #                Generate the provenance                          #
  #                                                                 #
  ###################################################################
  provenance:
    runs-on: ubuntu-latest
    needs: [rng, detect-env, build, generate-build-definition, generate-builder]
    outputs:
      provenance: ${{ steps.sign.outputs.output-name }}
    steps:
      - name: Checkout builder repository
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          path: __BUILDER_CHECKOUT_DIR__

      - name: Download build definition
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-download-artifact
        with:
          name: "${{ needs.generate-build-definition.outputs.build-definition-name }}"
          path: "${{ needs.generate-build-definition.outputs.build-definition-name }}"
          sha256: "${{ needs.generate-build-definition.outputs.build-definition-sha256 }}"

      ###################################################################
      #                1. Create the predicate                          #
      ###################################################################

      # - name: Create predicate
      #   id: predicate
      #   uses: ./__BUILDER_CHECKOUT_DIR__/internal/builders/docker-based/docker-based-predicate
      #   with:
      #     build-definition: "${{ needs.generate-build-definition.outputs.build-definition-name }}"
      #     builder-repository: "${{ needs.detect-env.outputs.repository }}"
      #     builder-ref: "${{ needs.detect-env.outputs.ref }}"
      #     binary-sha256: "${{ needs.generate-builder.outputs.builder-binary-sha256 }}"
      #     binary-name: "internal/builders/docker-based/cmd/build"
      #     binary-repository: "${{ needs.detect-env.outputs.repository }}"
      #     binary-ref: "${{ needs.detect-env.outputs.ref }}"
      - name: Create predicate
        id: predicate
        run: |
          cat <<EOF >DATA
          {
            "version": 1,
             "attestations": [
              {
                "name": "attestation1.intoto",
                "subjects": [
                  { "name": "artifact11",
                    "digest": { "sha256": "ad91970864102a59765e20ce16216efc9d6ad381471f7accceceab7d905703ef" }},
                  { "name": "artifact12",
                    "digest": { "sha256": "d4d5899a3868fbb6ae1856c3e55a32ce35913de3956d1973caccd37bd0174fa2" }}
                ]
              }
            ]
          }
          EOF

          cat DATA > predicate.json
          echo "predicate=predicate.json" >> $GITHUB_OUTPUT

      ###################################################################
      #                Generate the intoto attestations                 #
      ###################################################################

      - name: Download SLSA outputs
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-download-artifact
        with:
          name: "${{ needs.build.outputs.slsa-outputs-name }}"
          path: "${{ needs.build.outputs.slsa-outputs-name }}"
          sha256: "${{ needs.build.outputs.slsa-outputs-sha256 }}"

      - name: Create attestations
        id: attestations
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/generate-attestations
        with:
          slsa-outputs-file: "${{ needs.build.outputs.slsa-outputs-name }}"
          predicate-file: "${{ steps.predicate.outputs.predicate }}"
          output-folder: "attestations-${{ needs.rng.outputs.value }}"

      - name: Upload unsigned intoto attestations file for pull request
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: "attestations-${{ needs.rng.outputs.value }}"
          path: "attestations-${{ needs.rng.outputs.value }}"

      ###################################################################
      #                       Sign the attestation                      #
      ###################################################################

      # - name: Sign attestations
      #   id: sign
      #   uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/sign-attestations
      #   with:
      #     attestations: "${{ needs.attest.outputs.attestations-name }}"
      #     bundle: false

      - name: Sign attestations
        id: sign
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          mkdir envelope
          echo "{}" > envelope/envelope1.json
          echo "{}" > envelope/envelope2.json
          echo "outputs=envelope/" >> $GITHUB_OUTPUT

      - name: Upload the signed attestations
        id: upload
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: outputs
          path: "${{ steps.sign.outputs.outputs }}"
