# Copyright 2022 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: SLSA provenance generator

permissions:
  contents: read

env:
  # Generator
  BUILDER_BINARY: slsa-generator-generic-linux-amd64 # Name of the binary in the release assets.
  BUILDER_DIR: internal/builders/generic # Source directory if we compile the builder.

on:
  workflow_call:
    inputs:
      base64-subjects:
        description: "Artifacts for which to generate provenance, formatted the same as the output of sha256sum (SHA256 NAME\\n[...]) and base64 encoded."
        required: true
        type: string
      upload-assets:
        description: "If true provenance is uploaded to a GitHub release for new tags."
        required: false
        type: boolean
        default: false
      attestation-name:
        description: "The artifact name of the signed provenance. The file must have the intoto.jsonl extension. Defaults to <filename>.intoto.jsonl for single artifact or multiple.intoto.jsonl for multiple artifacts. DEPRECATED: Use provenance-name instead."
        required: false
        type: string
      provenance-name:
        description: The artifact name of the signed provenance. The file must have the intoto.jsonl extension. Defaults to <filename>.intoto.jsonl for single artifact or multiple.intoto.jsonl for multiple artifacts.
        required: false
        type: string
      compile-generator:
        description: "Build the generator from source. This increases build time by ~2m."
        required: false
        type: boolean
        default: false
      private-repository:
        description: "If true, private repositories can post to the public transparency log."
        required: false
        type: boolean
        default: false
    outputs:
      release-id:
        description: "The name of the release where provenance was uploaded."
        value: ${{ jobs.create-release.outputs.release-id }}
      attestation-name:
        description: "DEPRECATED: use the provenance-name output instead."
        value: ${{ jobs.generator.outputs.provenance-name }}
      provenance-name:
        description: "The artifact name of the signed provenance. (A file with the intoto.jsonl extension)."
        value: ${{ jobs.generator.outputs.provenance-name }}

jobs:
  # detect-env detects the reusable workflow's repository and ref for use later
  # in the workflow.
  detect-env:
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the generator ref
        id: detect
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow@main

  # generator builds the generator binary and runs it to generate SLSA
  # provenance.
  #
  # If `compile-generator` is true then the generator is compiled
  # from source at the ref detected by `detect-env`.
  #
  # If `compile-generator` is false, then the generator binary is downloaded
  # with the release at the ref detected by `detect-env`. This must be a tag
  # reference.
  generator:
    outputs:
      provenance-sha256: ${{ steps.sign-prov.outputs.provenance-sha256 }}
      provenance-name: ${{ steps.sign-prov.outputs.provenance-name }}
    runs-on: ubuntu-latest
    needs: [detect-env]
    permissions:
      id-token: write # Needed to create an OIDC token for keyless signing.
      contents: read
      actions: read # Needed to read workflow info.
    steps:
      - name: Generate builder
        uses: slsa-framework/slsa-github-generator/.github/actions/generate-builder@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          go-version: 1.18
          binary: "${{ env.BUILDER_BINARY }}"
          compile-builder: "${{ inputs.compile-generator }}"
          directory: "${{ env.BUILDER_DIR }}"
          allow-private-repository: ${{ inputs.private-repository }}

      - name: Create and sign provenance
        id: sign-prov
        shell: bash
        # NOTE: Inputs and `github` context are set to environment variables in
        # order to avoid script injection.
        # See: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#understanding-the-risk-of-script-injections
        env:
          GITHUB_CONTEXT: "${{ toJSON(github) }}"
          UNTRUSTED_SUBJECTS: "${{ inputs.base64-subjects }}"
          UNTRUSTED_PROVENANCE_NAME: "${{ inputs.provenance-name }}"
          UNTRUSTED_DEPRECATED_ATTESTATION_NAME: "${{ inputs.attestation-name }}"
        run: |
          set -euo pipefail
          untrusted_provenance_name=""
          if [ "$UNTRUSTED_PROVENANCE_NAME" != "" ]; then
            untrusted_provenance_name="$UNTRUSTED_PROVENANCE_NAME"
          else
            if [ "$UNTRUSTED_DEPRECATED_ATTESTATION_NAME" != "" ]; then
              echo "WARNING: deprecated attestation-name was used. Use provenance-name instead."
              untrusted_provenance_name="$UNTRUSTED_DEPRECATED_ATTESTATION_NAME"
            fi
          fi
          # Create and sign provenance.
          # NOTE: The builder verifies that the provenance path is located
          # in the current directory.
          # NOTE: $untrusted_provenance_path may be empty. In this case the
          # attest command chooses a file name based on the subject name and
          # number of subjects based on in-toto attestation bundle file naming conventions.
          # See: https://github.com/in-toto/attestation/blob/main/spec/bundle.md#file-naming-convention
          # NOTE: The attest commmand outputs the provenance-name and provenance-sha256
          "$GITHUB_WORKSPACE/$BUILDER_BINARY" attest --subjects "${UNTRUSTED_SUBJECTS}" -g "$untrusted_provenance_name"

      - name: Upload the signed provenance
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: "${{ steps.sign-prov.outputs.provenance-name }}"
          path: "${{ steps.sign-prov.outputs.provenance-name }}"
          if-no-files-found: error
          retention-days: 5

  # create-release creates a release and uploads provenance to the release if
  # `upload-assets` is true.
  create-release:
    outputs:
      release-id: ${{ steps.release.outputs.id }}
    runs-on: ubuntu-latest
    needs: [generator, detect-env]
    permissions:
      contents: write # Needed to write artifacts to a release.
    if: startsWith(github.ref, 'refs/tags/') && inputs.upload-assets == true
    steps:
      - name: Checkout builder repository
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          path: __BUILDER_CHECKOUT_DIR__

      - name: Download the provenance
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-download-artifact
        with:
          name: "${{ needs.generator.outputs.provenance-name }}"
          path: "${{ needs.generator.outputs.provenance-name }}"
          sha256: "${{ needs.generator.outputs.provenance-sha256 }}"

      - name: Release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # tag=v0.1.14
        id: release
        with:
          files: |
            ${{ needs.generator.outputs.provenance-name }}
