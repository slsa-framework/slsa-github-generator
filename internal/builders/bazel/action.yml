# Copyright 2023 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: SLSA3 Bazel Builder internal wrapper
description: SLSA3 Bazel Builder internal wrapper

inputs:
  slsa-workflow-inputs:
    description: "All the inputs formatted as a JSON map"
    required: true

  slsa-layout-file:
    description: "Location to store the layout content"
    required: true

  # Unused secret inputs.
  slsa-workflow-secret1: {}
  slsa-workflow-secret2: {}
  slsa-workflow-secret3: {}
  slsa-workflow-secret4: {}
  slsa-workflow-secret5: {}
  slsa-workflow-secret6: {}
  slsa-workflow-secret7: {}
  slsa-workflow-secret8: {}
  slsa-workflow-secret9: {}
  slsa-workflow-secret10: {}
  slsa-workflow-secret11: {}
  slsa-workflow-secret12: {}
  slsa-workflow-secret13: {}
  slsa-workflow-secret14: {}
  slsa-workflow-secret15: {}

outputs:
  artifacts-download-name:
    description: "The name of binaries folder to download"
    # NOTE: This is an "untrusted" value returned from the build.
    value: "${{ steps.rng.outputs.random }}-artifacts"
  artifacts-download-sha256:
    description: "SHA256 of the uploaded tarball of artifacts."
    value: ${{ steps.generate-artifacts.outputs.sha256 }}
  artifacts-actual-name:
    description: >
      The name of the folder which contains the artifacts.

      After downloading artifacts-download-name and extracting
      the folder.tgz from inside. A folder with artifacts with
      this name will be extracted.
    value: "bazel_builder_binaries_to_upload_to_gh_7bc972367cb286b7f36ab4457f06e369"

runs:
  using: "composite"
  steps:
    # NOTE: the repository is already cloned by the caller, so there's no need to
    # checkout ourselves.

    - name: Setup Bazelisk
      id: bazelisk
      uses: bazelbuild/setup-bazelisk@b39c379c82683a5f25d34f0d062761f62693e0b2 # v3.0.0

    - name: Setup Java
      if: ${{ fromJson(inputs.slsa-workflow-inputs).includes-java }} == 'true'
      id: java
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        distribution: "${{ fromJson(inputs.slsa-workflow-inputs).user-java-distribution }}"
        java-version: "${{ fromJson(inputs.slsa-workflow-inputs).user-java-version }}"

    - name: Check for Environment Image
      id: env-image
      shell: bash
      run: |
        if [[ -z "${{ fromJson(inputs.slsa-workflow-inputs).env-image }}" ]]
        then
          echo "No Environment Image provided. Will build without."
          echo "use_env_image=false" >> $GITHUB_OUTPUT
        else
          echo "Docker image provided. Running build on Docker Image."
          echo "use_env_image=true"  >> $GITHUB_OUTPUT
        fi

    - name: Build on Environment Image
      if: ${{ steps.env-image.outputs.use_env_image == 'true' }}
      env:
        UNTRUSTED_TARGETS: ${{ fromJson(inputs.slsa-workflow-inputs).targets }}
        UNTRUSTED_FLAGS: ${{ fromJson(inputs.slsa-workflow-inputs).flags }}
        UNTRUSTED_NEEDS_RUNFILES: ${{ fromJson(inputs.slsa-workflow-inputs).needs-runfiles }}
        UNTRUSTED_INCLUDES_JAVA: ${{ fromJson(inputs.slsa-workflow-inputs).includes-java }}
        UNTRUSTED_ENV_IMAGE: ${{ fromJson(inputs.slsa-workflow-inputs).env-image }}
      shell: bash
      run: |
        set -euo pipefail
        docker pull $UNTRUSTED_ENV_IMAGE
        curr_dir=$(basename "$(pwd)")
        docker run --rm --env UNTRUSTED_TARGETS=${UNTRUSTED_TARGETS} --env UNTRUSTED_FLAGS=${UNTRUSTED_FLAGS} --env UNTRUSTED_NEEDS_RUNFILES=${UNTRUSTED_NEEDS_RUNFILES} --env UNTRUSTED_INCLUDES_JAVA=${UNTRUSTED_INCLUDES_JAVA} -v $PWD/../:/src -w /src $UNTRUSTED_ENV_IMAGE /bin/sh -c "ls && tree && cd $curr_dir && ls && tree && ./../__TOOL_ACTION_DIR__/build.sh"

    - id: build
      if: ${{ steps.env-image.outputs.use_env_image == 'false' }}
      env:
        UNTRUSTED_TARGETS: ${{ fromJson(inputs.slsa-workflow-inputs).targets }}
        UNTRUSTED_FLAGS: ${{ fromJson(inputs.slsa-workflow-inputs).flags }}
        UNTRUSTED_NEEDS_RUNFILES: ${{ fromJson(inputs.slsa-workflow-inputs).needs-runfiles }}
        UNTRUSTED_INCLUDES_JAVA: ${{ fromJson(inputs.slsa-workflow-inputs).includes-java }}
      shell: bash
      run: |
        ./../__TOOL_ACTION_DIR__/build.sh

    # rng generates a random number to avoid name collision in artifacts
    # when multiple workflows run concurrently.
    - name: Generate random 16-byte value (32-char hex encoded)
      id: rng
      uses: slsa-framework/slsa-github-generator/.github/actions/rng@main

    - name: Generate Artifacts
      id: generate-artifacts
      uses: slsa-framework/slsa-github-generator/.github/actions/secure-upload-folder@main
      with:
        name: "${{ steps.rng.outputs.random }}-artifacts"
        path: "./bazel_builder_binaries_to_upload_to_gh_7bc972367cb286b7f36ab4457f06e369" # path-to-artifact(s)

    - name: Echo statement
      id: confirm
      shell: bash
      run: echo "Artifacts uploaded successfully"

    # NOTE: Here we create a JSON file that describes the attestations we want
    #       to create. Each attestation will be created as a separate file,
    #       each with the subjects specified. This allows complicated release
    #       pipelines that output many artifacts to organize the attestations
    #       for those artifacts in a flexible way.
    - name: Generate layout file
      id: generate-layout
      env:
        SLSA_OUTPUTS_ARTIFACTS_FILE: ${{ inputs.slsa-layout-file }}
      shell: bash
      run: ./../__TOOL_ACTION_DIR__/generate-layout.sh
