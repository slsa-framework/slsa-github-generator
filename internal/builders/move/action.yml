# Copyright 2023 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: SLSA Move builder
description: SLSA Move builder

inputs:
  slsa-workflow-inputs:
    description: "All the inputs formatted as a JSON map"
    type: string
    required: true

  slsa-layout-file:
    description: "Location to store the layout content"
    type: string
    required: true

  slsa-workflow-secret1: {}
  slsa-workflow-secret2: {}
  slsa-workflow-secret3: {}
  slsa-workflow-secret4: {}
  slsa-workflow-secret5: {}
  slsa-workflow-secret6: {}
  slsa-workflow-secret7: {}
  slsa-workflow-secret8: {}
  slsa-workflow-secret9: {}
  slsa-workflow-secret10: {}
  slsa-workflow-secret11: {}
  slsa-workflow-secret12: {}
  slsa-workflow-secret13: {}
  slsa-workflow-secret14: {}
  slsa-workflow-secret15: {}

outputs:
  package-name:
    description: "The name of the package."
    value: ${{ steps.build.outputs.package-name }}

  package-download-name:
    description: "Name of the artifact to download the target directory."
    value: ${{ steps.rng.outputs.random }}-build

  package-download-sha256:
    description: "The sha256 digest of the 'build' directory."
    value: ${{ steps.upload.outputs.sha256 }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Set up Homebrew
      uses: Homebrew/actions/setup-homebrew@master

    - name: Install Move Compiler
      shell: bash
      env:
        MOVE_COMPILER: ${{ fromJson(inputs.slsa-workflow-inputs).move-compiler }}
      run: |
        if [ "$MOVE_COMPILER" = "sui" ]; then
            echo "Installing Sui compiler..."
            brew install sui
        elif [ "$MOVE_COMPILER" = "aptos" ]; then
            echo "Installing Aptos compiler..."
            brew install aptos
        else
            echo "Unknown compiler: $MOVE_COMPILER"
            exit 1
        fi

    - name: Compile
      id: build
      shell: bash
      env:
        MOVE_COMPILER: ${{ fromJson(inputs.slsa-workflow-inputs).move-compiler }}
        MOVE_DIRECTORY: ${{ fromJson(inputs.slsa-workflow-inputs).move-directory }}
      run: |
        if [ -z "${GITHUB_WORKSPACE}" ]; then
          echo "\$GITHUB_WORKSPACE is empty."
          exit 1
        fi
        move_realpath=$(realpath -e "${MOVE_DIRECTORY}")
        echo "Directory '${MOVE_DIRECTORY}' resolved to '${move_realpath}'"
        github_workspace_realpath=$(realpath -e "${GITHUB_WORKSPACE}")
        echo "GitHub workspace '${GITHUB_WORKSPACE}' resolved to '${github_workspace_realpath}'"
        echo "Checking directory '${move_realpath}' is a sub-directory of '${github_workspace_realpath}'"
        if [[ "${move_realpath}" != "${github_workspace_realpath}" ]] && [[ "${move_realpath}" != "${github_workspace_realpath}"/* ]]; then
          echo "${MOVE_DIRECTORY} not a sub-directory of ${GITHUB_WORKSPACE}"
          exit 1
        fi
        # Directory was validated. Explicitly trust it.
        directory="${MOVE_DIRECTORY}"
        cd "${directory}"
        toml_file="Move.toml"
        package_name=$(grep -oP '(?<=name = ").*(?=")' "${toml_file}")
        package_version=$(grep -oP '(?<=version = ").*(?=")' "${toml_file}")
        if [ "${MOVE_COMPILER}" = "sui" ]; then
            echo "Compiling Sui compiler..."
            sui move build
        elif [ "${MOVE_COMPILER}" = "aptos" ]; then
            echo "Compiling Aptos compiler..."
            aptos move compile
        else
            echo "Unknown compiler: ${MOVE_COMPILER}"
            exit 1
        fi
        mv build "${GITHUB_WORKSPACE}/"
        {
          echo "package-name=${package_name}"
          echo "package-version=${package_version}"
        } >>"${GITHUB_OUTPUT}"

    # rng generates a random number to avoid name collision in artifacts
    # when multiple workflows run concurrently.
    - name: Generate random 16-byte value (32-char hex encoded)
      id: rng
      uses: slsa-framework/slsa-github-generator/.github/actions/rng@main

    - uses: slsa-framework/slsa-github-generator/.github/actions/secure-upload-folder@main
      id: upload
      with:
        name: ${{ steps.rng.outputs.random }}-build
        path: build
