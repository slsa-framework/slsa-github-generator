# Copyright 2023 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "npm-publish"
description: "Publish package and provenance to npm"
inputs:
  access:
    description: "The package access level. Defaults to 'restricted' for scoped packages, 'public' for unscoped packages"
    required: false
    default: ""
  dist-tag:
    description: "The package dist-tag to attach. See `npm help dist-tag` for more information."
    required: false
    default: "latest"
  node-auth-token:
    description: "The npm registry auth token used to publish the package."
    required: true
  package-name:
    description: "The file name for the package tarball in the artifact."
    required: true
  package-download-name:
    description: "The artifact name for the package tarball."
    required: true
  package-download-sha256:
    description: "The sha256 of the package tarball artifact."
    required: true
  provenance-name:
    description: "The file name for the package provenance in the artifact."
    required: true
  provenance-download-name:
    description: "The artifact name for the package provenance."
    required: true
  provenance-download-sha256:
    description: "The sha256 of the package provenance artifact."
    required: false
runs:
  using: "composite"
  steps:
    - name: Create temp dir
      id: temp-dir
      shell: bash
      run: |
        set -euo pipefail
        temp_dir=$(mktemp -d)
        echo "path=${temp_dir}" >>"${GITHUB_OUTPUT}"

    - name: Download tarball
      uses: slsa-framework/slsa-github-generator/.github/actions/secure-download-artifact@v1.9.1-rc.0
      with:
        name: ${{ inputs.package-download-name }}
        path: "${{ steps.temp-dir.outputs.path }}/${{ inputs.package-name }}"
        sha256: ${{ inputs.package-download-sha256 }}

    - name: Download provenance
      uses: slsa-framework/slsa-github-generator/actions/nodejs/secure-attestations-download@v1.9.1-rc.0
      with:
        name: ${{ inputs.provenance-download-name }}
        path: "${{ steps.temp-dir.outputs.path }}"
        sha256: ${{ inputs.provenance-download-sha256 }}

    - name: Publish the package
      id: publish
      shell: bash
      env:
        ACCESS: ${{ inputs.access }}
        PACKAGE_PATH: "${{ steps.temp-dir.outputs.path }}/${{ inputs.package-name }}"
        ATTESTATION_PATH: "${{ steps.temp-dir.outputs.path }}/${{ inputs.provenance-download-name }}/${{ inputs.provenance-name }}"
        DIST_TAG: ${{ inputs.dist-tag }}
        NODE_AUTH_TOKEN: ${{ inputs.node-auth-token }}
      run: |
        set -euo pipefail

        temp_dir=$(mktemp -d)
        cd "${temp_dir}"

        # Install npm 9.8.1 which includes support for --provenance-file (added in 9.7.0).
        # This installs locally in the temp directory.
        npm install npm@9.8.1

        # Print the npm version.
        echo "** Installed local version of npm**"
        ./node_modules/.bin/npm version

        # Return to the working directory.
        cd -

        publish_flags=("--provenance-file=${ATTESTATION_PATH}")
        if [[ "${ACCESS}" != "" ]]; then
          publish_flags+=("--access=${ACCESS}")
        fi
        if [[ "${DIST_TAG}" != "" ]]; then
          publish_flags+=("--tag=${DIST_TAG}")
        fi

        # NOTE: Use the absolute path to the tarball because npm tries to check
        # a remote github.com repository if the "package spec" looks like it
        # could be a "<owner>/<repo-name>" resulting in git errors.
        package_abs_path=$(readlink -m "${PACKAGE_PATH}")

        "${temp_dir}/node_modules/.bin/npm" publish --loglevel verbose "${package_abs_path}" "${publish_flags[@]}"
